
NAME

    CBProFOTF1

SYNOPSIS

    CBProFOTF1 [ opts ] --project pathname  
               [ --plans-dspllX pathname ]
               [ --plans-nX pathname ]

    CBProFOTF1 --help

DESCRIPTION

    This tool is used to define alternate output frequency plans for a
    supported device. This is referred to as frequency-on-the-fly (FOTF).
    Currently Si5346/47/48/83/84/96/97 multi-DSPLL devices and
    Si5340/41/42/42H/44/44H/45/80/91/92/94/95 single-DSPLL / multi-N divider
    (MultiSynth) devices are supported.

    For multi-DSPLL devices, an alternate frequency plan can mean changing one
    or all of the following:

        * Clock output frequency
        * Clock input frequency
        * DSPLL bandwidth
        * LOL thresholds
        * OOF thresholds

    For single-DSPLL devices, only clock output frequency can be changed.

    For multi-PLL devices Si5346/47/48/83/84/88/89/96/97, alternate plans are
    defined on a per-DSPLL basis, with changes made to that DSPLL guaranteed
    not to disturb outputs on another DSPLL. The key output of the tool is a
    number of register "scripts" that, when written to the device, will switch
    a DSPLL from one plan to another, with other DSPLLs unaffected.

    Similarly, for single PLL-devices
    Si5340/41/42/42H/44/44H/45/71/72/80/91/92/94/95, alternate plans are
    defined on a per-N divider basis, with changes made to that N divider
    guaranteed not to disturb outputs on another N divider. Register scripts
    for each N divider are created.

    Note: the CBProFOTF1 tool does not support Precision grades of the
    Si5391/2/4/5 such as P-Grade. These grades do not support manual N divider
    assignment for an output. Instead, CBPro selects the N divider that will
    achieve lowest possible jitter. Due to this, there is little flexibility
    to do FOTF. The CBProMultiEditAndExport or CBProProjectRegistersExport
    CLIs can be used to completely reconfigure a Precision grade device. See
    "CBPro Tools & Support for In-System Programming" available from the CBPro
    Welcome page to learn more.

    The tool has two primary inputs:

        * A project file for the "base" design. All alternate plans will be 
          derived from this base config. The --project command line option is
          used specify the base project file.

        * One or more plan files. There is a file per-DSPLL or per-N divider.
          You don't  have to define alternate plans for every DSPLL/N, 
          however. --plans-dsplla, --plans-dspllb, etc. and --plans-n0, 
          --plans-n1, etc. command line options are used specify each plan 
          file.

    Usage is explained by working through an example in the following
    sections:

        MULTI-DSPLL USAGE AND EXAMPLE
        Si5346/47/48/83/84/96/97
        
        SINGLE-DSPLL USAGE AND EXAMPLE 
        Si5340/41/42/42H/44/44H/45/80/91/92/94/95

    Examples are bundled with CBPro in C:\Program Files (x86)\Silicon
    Laboratories\ClockBuilder Pro\CLI\Samples (or equivalent). The multi-PLL
    Si5347 example is in the FOTF-For-Multi-PLL-Device folder. The single PLL
    Si5345 example is in the FOTF-For-Single-PLL-Device folder. The output of
    the samples is included. If you want to experiment with the samples by
    re-running or editing the plan files, make a copy to your user area to
    avoid file system permission issues. Note any future update of CBPro will
    overwrite any changes you make under the CBPro installation folder.

    ************************************************************************
    * IMPORTANT: the frequency plan and register settings for your "base"  *
    * design will usually be different when using the FOTF tool. The FOTF  *
    * tool is optimizing VCO frequency and divider values for ALL required *
    * plan combinations, not simply the base design/project. Also, certain *
    * device settings will be adjusted to support FOTF and will be         *
    * reflected in the base configuration script.                          *
    *                                                                      *
    * Any settings on the "Configure Frequency Planner" page of CBPro      *
    * (Si5340/41/42/44/45/91/92/94/95 and similar) will be ignored when    *
    * creating doing FOTF. The tool will optomize for lowest jitter across *
    * all plans.                                                           *
    *                                                                      *
    * Your embedded system must therefore write the base configuration     *
    * script (Base-Plan-Register-Script.txt) generated by this tool to the *
    * device when it is powered up or reset. This is true even if you      *
    * generated an Orderable Part Number (OPN) using on the base project   *
    * file.                                                                *
    ************************************************************************

EMBEDDED HOST WORKFLOW

    On Silicon Labs device power up or reset, your host **must** write
    Base-Plan-Register-Script.txt. This will fully configure the part to
    synthesize the clocks defined in the base project.

    After writing this base configuration, your host will only need to write
    one of the small plan scripts when it needs to switch one of the PLLs or
    Nx dividers to another configuration. Plan scripts are created for the
    base config and each numbered alternate plan.

    For example, for an Si5346/47/48/83/84/88/89/96/97:

       * Write Base-Plan-Register-Script.txt to fully configure the device 
         for base plan and ready for further plan changes
       * Write DSPLLA-Register-Script-Plan1.csv to change DSPLL A outputs to 
         plan #1
       * Write DSPLLB-Register-Script-Plan3.csv to change DSPLL B outputs to 
         plan #3
       * Write DSPLLA-Register-Script-Base-Plan.csv to change DSPLL A outputs
         back to base plan

    And for an Si5340/41/42/42H/44/44H/45/71/72/80/91/92/94/95:

       * Write Base-Plan-Register-Script.txt to fully configure the device 
         for base plan and ready for further plan changes
       * Write N0-Register-Script-Plan1.csv to change N0 outputs to plan #1
       * Write N2-Register-Script-Plan4.csv to change N2 outputs to plan #4
       * Write N0-Register-Script-Base-Plan.csv to change N0 outputs back to
         base plan

CUSTOM PART NUMBER WARNING

    The base frequency plan calculated by this tool may be different from what
    CBPro calculates for only the stand-alone project. The FOTF tool is
    optimizing for ALL required plan combinations, not simply the base
    design/project. If your host is doing FOTF via the DSPLL or N divider plan
    script files generated by this tool, your host must write the base plan
    script whenever the Si538x/4x is reset. The work flow is explained in the
    sections below.

TESTING WITH CBPRO

    A key output of this tool are register write script files that your host
    can write to the Silicon Labs device via I2C or SPI. The EVB GUI can be
    used to test scripts on an EVB or when connected to your system board
    using the ClockBuilder Pro Field Programmer. 

    When the EVB GUI is launched, select "File->Write Register File to Device"
    to write a script file. Per the workflow described below, you would:

        (1) Write Base-Plan-Register-Script.txt
        (2) Write any of *-Register-Script-Plan*.csv or 
            *-Register-Script-Base-Plan.csv (* is wildcard)

    Step 2 can be repeated to switch between different plans or back to the
    "base" plan.

    Alternatively, the CBProDeviceWrite command line tool can be used to write
    a register script. For example:

        Write to EVB:
        CBProDeviceWrite --registers Base-Plan-Register-Script.txt

        Write to System Board via Field Programmer:
        CBProDeviceWrite --registers  --mode i2c --io-voltage 3.3 
                         --i2c-address 0x6c --speed 400k 
                         Base-Plan-Register-Script.txt

    Both the EVB GUI's Write Register File feature and the CBProDeviceWrite
    tool will use the optional read-modify-write mask to perform the write.
    The mask is not populated for single PLL devices, but is for multi-PLL
    devices like the Si5346/7.

    The format that these two tools accept is:

        Address,Data[,Mask]

    Spaces and tabs can also be used to separate fields. Comments are
    supported. For example:

        // Comment
        # Comment
        0x009B,0x56,0xF0
        0x009B 0x56 0xF0
        0x00AA 0xAC # Comment; no read-modify-write mask in this


MULTI-DSPLL USAGE AND EXAMPLE

    On multi-DSPLL devices, frequency-on-the-fly can only be performed on a
    PLL that has exclusive clock inputs. That is, an input to the FOTF PLL
    cannot also be MUXd to another DSPLL. For example, given the following
    configuration:

        IN0 -> DSPLL A
        IN1 -> DSPLL A
        IN2 -> DSPLL B
        IN3 -> DSPLL C/D

    FOTF can be performed on DSPLL A and B. FOTF is not supported on DSPLL C/D
    because IN3 is shared between these PLLs. The tool enforces this
    restriction, and will raise an error if you attempt FOTF on DSPLL C or D.

    FOTF can technically mean not changing input or output frequencies and
    instead only reconfiguring one of OOF, LOS, or bandwidth. A plan file only
    has to reconfigure *at least one* of the following:

        * Clock output frequency
        * Clock input frequency
        * DSPLL bandwidth
        * LOL thresholds
        * OOF thresholds

    There are some restrictions on Si5348/83/84/88/89 network synchronizers:

       * DSPLL B inputs, outputs, bandwidth, etc. cannot be adjusted
       * A 1 Hz output frequency cannot be set in a plan file; it can only
         be present in the base project (but can be switched to non-1 Hz
         in a plan)
       * On Si5383/84/88/89, if a 1 Hz input is present, DSPLL D cannot
         be adjusted
       * On Si5388/89, DSPLL D cannot be adjusted unless in network
    synchronizer mode

    The plan file format is best explained through some examples. Continuing
    with the scenario above, the following DSPLL to output MUX is defined:

        DSPLL A -> OUT0/OUT1
        DSPLL B -> OUT2/OUT3
        DSPLL C -> OUT4/OUT5
        DSPLL D -> OUT6/OUT7

    Here is a sample DSPLL A plan file for this configuration. Three plans are
    defined:

        # DSPLL A  Plans

        Plan,Item,Value

        1,IN0,155.52M
        1,IN1,155.52M
        1,OUT0,148.5M
        1,OUT1,27M
        1,OLBW,20
        1,FLBW,100
        1,LOL_SET_THR,30
        1,LOL_CLR_THR,3
        1,OOF_SET_THR0,10
        1,OOF_CLR_THR0,1
        1,FAST_OOF_SET_THR0,2000
        1,FAST_OOF_CLR_THR0,1000

        2,IN0,19.44M
        2,IN1,19.44M
        2,OUT0,155.52M
        2,OUT1,622.08M
        2,LOL_SET_THR,300
        2,LOL_CLR_THR,30

        3,IN0,155.52*255/236/16M
        3,IN1,155.52*255/236/16M
        3,OUT0,168+21/512M
        3,OUT1,672+21/128M

    Note how what is reconfigured in each numbered plan does not have to be
    the same as another plan. For example, plan #1 changes input frequency,
    output frequencuy, bandwidth, LOL, and OOF settings while plan #2 only
    changes input/output frequencies and LOL settings. Those items that are
    not reconfigured will inherit settings from the base project (*not* the
    lower numbered plan).

    In the DSPLL B plan file, six plans defined that simply reconfigure
    bandwidth between plans:

        # DSPLL B  Plans

        Plan,Item,Value

        # Plan #1
        1,OLBW,20
        1,FLBW,100

        # Plan #2
        2,OLBW,40
        2,FLBW,1000

        # Plan #3
        3,OLBW,100
        3,FLBW,1000

        # Plan #4
        4,OLBW,200
        4,FLBW,1000

        # Plan #5
        5,OLBW,400
        5,FLBW,1000

    Rules for plan files:

        * Comments are supported via # syntax.
        * Blank lines are skipped.
        * The header "Plan,Item,Value" must be present.
        * Plans are numbered starting at 1, and numbering must be consecutive.
        * There is no limit on number of plans, other than that imposed by 
          computation time and virtual memory used by the tool to solve for
          your plans.
        * The number of plans does not have to be equal between DSPLLs: there
          is no relationship between plan #1 in DSPLL A and plan #1 in DSPLL
          B, and therefore you can vary the number of plans between DSPLLs.
        * You DO NOT have to specify an inputs or outputs: the base design's 
          clocks will be used if not defined.
        * You DO NOT have to specify bandwidth: the base design's values will
          be used by default.
        * If at least one input is specified on a DSPLL plan, all inputs on
          that DSPLL must be defined.
        * If at least one output is specified on a DSPLL plan, all outputs on
          that DSPLL must be defined.
        * You can change open loop bandwidth using the item OLBW; you can
          change Fastlock bandwidth using the item FLBW; if you specify one,
          you must specify the other.
        * Exit from Holdover bandwidth may be specified if used by the
          device revision/configuration. The HOBW keyword is used. The CLI
          will generate an error if not specified when required, such as
          OLBW was specified and ramping has been disabled.
        * LOL thresholds for a DSPLL can optionally be changed using the
          LOL_SET_THR and LOL_CLR_THR keywords. Decimal values are accepted.
          Can only be used if the base project file has "Auto Set" unchecked.
        * OOF thresholds for an input can be set using the OOF_SET_THRx,
          OOF_CLR_THRx (precision OOF) and FAST_OOF_SET_THRx,FAST_OOF_CLR_THRx
          (fast OOF) keywords, where x is the INx input number starying at 0.
          Thresholds can only be specified if the Enabled checkbox is set
          on the corresponding input. Decimal values are supported for 
          precision OOF and integer values for fast OOF.
        * Changes made to a previous plan have no effect on a successive plan.
          For example, in DSPLL A plan #1, the base design's bandwidth is 
          changed. In DSPLL B plan #2, there is no entry for bandwidth. The 
          bandwidth will be therefore be defined based on the base design,
          NOT plan #1. 
        * The same frequency expressions used in CBPro can be used in the plan
          files, with the exception that you cannot reference another clock in
          the system (i.e. an expression such as OUT0*2 is not supported).
        * Item keywords such as IN1, OUT0, and OLBW are case insensitive.

    Given above, the general requirement for a plan is that it must specify at
    leat one change to input frequency, output frequency, bandwidth, LOL, or
    OOF for a DSPLL. The following are therefore allowed plans for our ongoing
    DSPLL A example:

        Plan,Item,Value

        1,IN0,155.52*255/236/16M

        2,OUT0,155.52M
        2,OUT1,622.08M

        3,OLBW,20
        3,FLBW,100

        4,LOL_SET_THR,30
        4,LOL_CLR_THR,3

        5,OOF_SET_THR0,10
        5,OOF_CLR_THR0,1
        5,FAST_OOF_SET_THR0,2000
        5,FAST_OOF_CLR_THR0,1000

    The tool does NOT support doing FOTF on a DSPLL if **ALL** of the
    following conditions are true:

        * The device is Revision B
        * An input to the DSPLL is shared with another DSPLL
        * The "optimize plan for zero ppm frequency offset" setting in
          the CBPro "Define Output Frequencies" wizard page is checked

    The tool will check for these conditions and will abort with a fatal error
    if true. You can uncheck the "optimize plan for zero ppm frequency offset"
    checkbox and re-save your project file to use the FOTF tool. Please review
    http://www.silabs.com/Support%20Documents/TechnicalDocs/Si534x-Applications
    %20Notice-Part-Per-Trillion%20Frequency-Offset.pdf before making this
    change.

    To create the alternate frequency plans for DSPLL A & B, the
    CBProFOTF1.exe command line tool is run:

        CBProFOTF1 --project Si5347-RevD.slabtimeproj
                   --out-folder Output --create-out-folder 
                   --plans-dsplla DSPLLA.txt --plans-dspllb DSPLLB.txt

    This will calculate the best base frequency plan and alternate frequency
    plans. Status messages will be logged to the console:

        Loading project Si5347-RevD-Project.slabtimeproj ...
        Output files will be saved in "Output"
        Solving for shared PFD frequency(s) based on shared input(s) on DSPLL 
    ...
        Success
        DSPLL A Fpfd will allowed to vary between plans
        DSPLL B Fpfd will allowed to vary between plans
        DSPLL C Fpfd will be fixed at 1.944 MHz [ 1 + 118/125 MHz ] 
        across plans
        DSPLL D Fpfd will be fixed at 1.944 MHz [ 1 + 118/125 MHz ] 
        across plans
        Calculating base project frequency plan ...
        Saving Base design files ...
        Calculating DSPLLA Plan #1
        Calculating DSPLLA Plan #2
        Calculating DSPLLA Plan #3
        Saving DSPLLA files ...
        Calculating DSPLLB Plan #1
        Calculating DSPLLB Plan #2
        Calculating DSPLLB Plan #3
        Calculating DSPLLB Plan #4
        Calculating DSPLLB Plan #5
        Calculating DSPLLB Plan #6
        Saving DSPLLB files ...
        Done; 5 seconds elapsed

    It is important to note that the base frequency plan calculated by this
    tool may be different from what CBPro calculates for only the stand-alone
    project. Why? The FOTF tool is optimizing Fpfd for ALL required plan
    combinations, not simply the base design/project.

    The output files created by the tool will be described below. The general
    work flow of a host doing in-system update to these alternate frequency
    plans is:

        * Write the complete register script for the base configuration. This 
          needs to be done even if your device has an OPN (factory)
          configuration, since the base design frequency plan calculated by 
          the FOTF tool may differ from that calculated by CBPro in 
          stand-alone mode.

        * Write a DSPLL plan script to switch a particular DSPLL to an
          alternate plan (or back to the base plan).

    When the example command sequence is run, the following files are created:

        Base-Plan-Design-Report.txt

            Design report for the base design. This report may differ from 
            what CBPro would generate for the same base project file.

        Base-Plan-Register-Script.txt

            A sequence of register writes to perform to load the base 
            configuration. This may be different from what CBPro would export
            for the same base project file. ** YOUR HOST MUST WRITE THIS
            SCRIPT WHEN THE DEVICE IS POWERED ON OR RESET. **

        DSPLLA-Register-Script-Base-Plan.csv
        DSPLLA-Register-Script-Plan1.csv
        DSPLLA-Register-Script-Plan2.csv
        DSPLLA-Register-Script-Plan3.csv

            Register writes to perform to switch to a plan on DSPLL A. This 
            includes all necessary control register writes required to fully 
            load the new configuration (such as divider UPDATE writes and 
            DSPLL soft reset). 

            The format is:
            
                Address,Value,Mask

            With all values 0x hexadecimal syntax.

            Mask is new as of CBPro 2.20.3. If mask is 0xFF, no 
            read-modify-write is required. Otherwise, read 
            register value and write to device Read&~Mask + Value&Mask.

            Read-modify-write is only required for a small number of
            registers where settings for multiple DSPLLs are stored
            at a single address (register).

            Pseudo code implementation of handling mask:

            UInt16 address = row[0]
            UInt8 value = row[1]
            UInt8 mask = row[2]

            If (mask != 0xFF)
            {
               read = Read_Register(address)
               value = read&~mask + value&mask
            }

            Write_Register(address, value)

            A comment header at the start of the script summarizes the
            configuration. Example:

            # DSPLLA Register Script - Base-Plan
            #
            # Base Project: Si5347-RevD-Project.slabtimeproj
            # Part: Si5347
            # Design ID: <none>
            # Inputs Vary Between Plans: Yes
            # Created By: CBProFOTF1 v2.20.2.101 [2018-01-09]
            # Timestamp: 2018-01-09 16:18:46 GMT-06:00
            #
            # IN0:  25 MHz
            #       on DSPLL A
            # OUT0: 161.1328125 MHz
            # OUT1: 644.53125 MHz
            # 
            # Fpfd = 1.9230769230769230... MHz [ 1 + 12/13 MHz ]
            # Fdco = 1.2890625 GHz [ 1 + 37/128 GHz ]
            # 
            # P0 = 13/1
            # MA = 670.3125 [ 670 + 5/16 ]
            # N0 = 11.0219636363636363... [ 11 + 151/6875 ]
            # R0 = 8
            # R1 = 2
            # 
            # Nominal Bandwidth:
            #   Desired: 80.000 Hz
            #   Actual:  77.716 Hz
            #   Coefficients:
            #      BW0:  15
            #      BW1:  30
            #      BW2:  13
            #      BW3:  12
            #      BW4:  3
            #      BW5:  63
            # Fastlock Bandwidth:
            #   Desired: 1.000 kHz
            #   Actual:  1.246 kHz
            #   Coefficients:
            #      BW0:  19
            #      BW1:  40
            #      BW2:  9
            #      BW3:  8
            #      BW4:  3
            #      BW5:  63
            # Holdover Bandwidth:
            #    N/A (Ramped Exit from Holdover)
            # 
            # LOL:
            #    Set Threshold:   10 ppm
            #    Clear Threshold: 1 ppm
            # 
            # Precision OOF:
            # 
            # Input  Enable   Assert Threshold  De-Assert Threshold
            # -----  -------  ----------------  -------------------
            # IN0    Enabled  100.0000 ppm      98.0000 ppm        
            # 
            # Fast OOF:
            # 
            # Input  Enable   Assert Threshold  De-Assert Threshold
            # -----  -------  ----------------  -------------------
            # IN0    Enabled  4000 ppm          3000 ppm           
            # 
            Address,Value,Mask
            # If mask is 0xFF, no read-modify-write is required. Otherwise, 
            # read register value and write to device Read&~Mask + Value&Mask
            # Configuration Preamble
            0x010C,0x00,0xFF
            0x0116,0x00,0xFF
            0x0B3C,0x00,0xFF
            0x0B3D,0x00,0xFF
            0x042C,0x86,0xFF
            0x0436,0x00,0xFF
            0x002C,0x0E,0xFF
            0x003F,0xEE,0xFF
            0x0092,0x0E,0xFF
            0x009A,0x0E,0xFF
            # Write Configuration
            0x002E,0x3C,0xFF
            0x0036,0x3C,0xFF
            0x0041,0x0B,0xFF
            0x0046,0x32,0xFF
            0x004A,0x31,0xFF
            0x0051,0x03,0xFF
            0x0055,0x02,0xFF
            0x005A,0xAA,0xFF
            0x005B,0xAA,0xFF
            0x005C,0x0A,0xFF
            0x005D,0x01,0xFF
            0x0096,0x88,0x0F
            0x0098,0x66,0x0F
            0x009B,0x66,0x0F
            ...
            0x04A0,0x0C,0xFF
            0x04A1,0x03,0xFF
            # Configuration Postamble
            0x0420,0x01,0xFF
            0x030C,0x01,0xFF
            0x0414,0x01,0xFF
            0x0230,0x01,0xFF
            0x0092,0x0F,0xFF
            0x009A,0x0F,0xFF
            0x002C,0x0F,0xFF
            0x003F,0xFF,0xFF
            0x0436,0x04,0xFF
            0x042C,0x87,0xFF
            0x010C,0x01,0xFF
            0x0116,0x01,0xFF
            0x001C,0x02,0xFF
            0x0B3C,0xFF,0xFF
            0x0B3D,0x00,0xFF
            
        DSPLLA-Report.txt

            A custom frequency-on-the-fly report for DSPLL A.  This 
            summarizes the key design goals and frequency plan elements for
            each plan, including the base plan. For example:

            DSPLLA Frequency-On-The-Fly Report
            
            Base Project: Si5347-RevD-Project.slabtimeproj
            Part: Si5347
            Design ID: <none>
            Inputs Vary Between Plans: Yes
            Created By: CBProFOTF1 v2.20.2.101 [2018-01-09]
            Timestamp: 2018-01-09 16:18:46 GMT-06:00
            
            Base Plan
            =========
            IN0:  25 MHz
                  on DSPLL A
            OUT0: 161.1328125 MHz
            OUT1: 644.53125 MHz
            
            Fpfd = 1.9230769230769230... MHz [ 1 + 12/13 MHz ]
            Fdco = 1.2890625 GHz [ 1 + 37/128 GHz ]
            
            P0 = 13/1
            MA = 670.3125 [ 670 + 5/16 ]
            N0 = 11.0219636363636363... [ 11 + 151/6875 ]
            R0 = 8
            R1 = 2
            
            Nominal Bandwidth:
               [ excluded in this example ]
            Fastlock Bandwidth:
               [ excluded in this example ]
            Holdover Bandwidth:
               N/A (Ramped Exit from Holdover)
            
            LOL:
               Set Threshold:   10 ppm
               Clear Threshold: 1 ppm
            
            Precision OOF:
            
            Input  Enable   Assert Threshold  De-Assert Threshold
            -----  -------  ----------------  -------------------
            IN0    Enabled  100.0000 ppm      98.0000 ppm        
            
            Fast OOF:
            
            Input  Enable   Assert Threshold  De-Assert Threshold
            -----  -------  ----------------  -------------------
            IN0    Enabled  4000 ppm          3000 ppm           
            
            Plan #1
            =======
            IN0:  155.52 MHz
                  on DSPLL A
            OUT0: 148.5 MHz
            OUT1: 27 MHz
            
            Fpfd = 1.9938461538461538... MHz [ 1 + 323/325 MHz ]
            Fdco = 1.188 GHz [ 1 + 47/250 GHz ]
            
            P0 = 78/1
            MA = 595.8333333333333333... [ 595 + 5/6 ]
            N0 = 11.9595959595959595... [ 11 + 95/99 ]
            R0 = 8
            R1 = 44

            ...        
            
            **NOTE**: if any outputs in the plan may have worse case jitter 
            approaching 400 fs, it will be flagged in the plan mini 
            report. For example:
            
            Warning: worse case jitter may approach 400 fs on OUT0,OUT1  
        
        DSPLLA-Settings-Diff-All-Plans.csv

            A breakdown of what register settings are different between
            each plan on DSPLL A. This is for informational/debug use. It
            does NOT include plan update control register settings, such
            as MA_FUPDATE and DSPLLA_SOFTRESET.

    A similar set of files is created for DSLL B. In our example, there
    are more plans for this DSPLL. There are therefore additional columns
    in the "All" files and additional broken out register script files:

        DSPLLB-Register-Script-Base-Plan.csv
        DSPLLB-Register-Script-Plan1.csv
        DSPLLB-Register-Script-Plan2.csv
        DSPLLB-Register-Script-Plan3.csv
        DSPLLB-Register-Script-Plan4.csv
        DSPLLB-Register-Script-Plan5.csv
        DSPLLB-Register-Script-Plan6.csv
        DSPLLB-Report.txt
        DSPLLB-Settings-Diff-All-Plans.csv

    An example sequence of activities by a host could be:

        1. Write Base-Plan-Register-Script.txt at system startup, reset, 
           etc.: any time NVM would be reloaded by the Si538x/4x device.
           The base input/output/bandwidth configuration will be
           operational after this.
        2. Write DSPLLA-Register-Script-Plan2.csv to switch DSPLL A to plan
           #2. DSPLL B will be unaffected.
        3. Write DSPLLB-Register-Script-Plan6.csv to switch DSPLL B to plan
           #6. DSPLL A will be unaffected.

    If the desired base + alternate plans can be achieved, the tool exits with
    status code 0. If it cannot, a message will be printed to standard error
    and the tool exits with status code 1.

    The example described above is available in C:\Program Files (x86)\Silicon
    Laboratories\ClockBuilder Pro\CLI\Samples\Multi-PLL-FOTF (or equivalent).

SINGLE-DSPLL USAGE AND EXAMPLE

    In order to use this tool, all outputs in a design must be manually
    assigned to an N divider. The tool checks your design and will exit with
    an error if this is not the case.

    The plan file format and tool work flow will be explained through an
    Si5345 example. The Si5345 is a 10-channel, any-frequency, any-output
    jitter attenuator/clock multiplier. It has 5 N dividers (aka MultiSynths).
    The base project has the following divider assignment: 

    	N0:
    	  OUT0: 161.1328125 MHz [ 161 + 17/128 MHz ]
    	  OUT1: 322.265625 MHz [ 322 + 17/64 MHz ]
    	N1:
    	  OUT2: 155.52 MHz [ 155 + 13/25 MHz ]
    	  OUT3: 311.04 MHz [ 311 + 1/25 MHz ]
    	N2:
    	  OUT4: 148.5 MHz [ 148 + 1/2 MHz ]
    	  OUT5: 148.5 MHz [ 148 + 1/2 MHz ]
    	  OUT6: 148.5 MHz [ 148 + 1/2 MHz ]
    	  OUT7: 148.5 MHz [ 148 + 1/2 MHz ]
    	  OUT8: 148.5 MHz [ 148 + 1/2 MHz ]
    	  OUT9: 148.5 MHz [ 148 + 1/2 MHz ]
    	N3:
    	  Unused
    	N4:
          Unused

    Here is a sample N0 plan file for this configuration. Only one plan is
    defined:

    	# N0 Plans

    	Plan,Item,Value

    	# Plan #1
    	1,OUT0,155.52M
    	1,OUT1,622.08M/2

    And N1 plan file, with one plan defined:

    	# N1 Plans

    	Plan,Item,Value

    	# Plan #1
    	1,OUT2,161+17/128M
    	1,OUT3,644.53125M/2

    Finally, the N2 plan file defines 5 different plans:

    	# N2 Plans

    	Plan,Item,Value

    	# Plan #1
    	1,OUT4,155.52*255/237M
    	1,OUT5,155.52*255/237M
    	1,OUT6,155.52*255/237M
    	1,OUT7,155.52*255/237M
    	1,OUT8,155.52*255/237M
    	1,OUT9,155.52*255/237M

    	# Plan #2
    	2,OUT4,156.25M
    	2,OUT5,156.25M
    	2,OUT6,156.25M
    	2,OUT7,156.25M
    	2,OUT8,156.25M
    	2,OUT9,156.25M

    	# Plan #3
    	3,OUT4,132.8125M
    	3,OUT5,132.8125M
    	3,OUT6,132.8125M
    	3,OUT7,132.8125M
    	3,OUT8,132.8125M
    	3,OUT9,132.8125M

    	# Plan #4
    	4,OUT4,159.375M
    	4,OUT5,159.375M
    	4,OUT6,159.375M
    	4,OUT7,159.375M
    	4,OUT8,159.375M
    	4,OUT9,159.375M

    	# Plan #5
    	5,OUT4,156.25*66/64*255/237M
    	5,OUT5,156.25*66/64*255/237M
    	5,OUT6,156.25*66/64*255/237M
    	5,OUT7,156.25*66/64*255/237M
    	5,OUT8,156.25*66/64*255/237M
    	5,OUT9,156.25*66/64*255/237M

    In these examples, N0 and N1 support switching between two plans: base and
    plan #1. N2 supports switching between 6 plans: base and plan 1-5.

    Rules for plan files:

        * Comments are supported via # syntax.
        * Blank lines are skipped.
        * The header "Plan,Item,Value" must be present.
        * Plans are numbered starting at 1, and numbering must be consecutive.
        * There is no limit on number of plans, other than that imposed by 
          computation time and virtual memory used by the tool to solve for
          your plans.
        * The number of plans does not have to be equal between N dividers: 
          there is no relationship between plan #1 in N0 and plan #1 in N1,
          and therefore you can vary the number of plans between N dividers.
        * Bandwidth and input frequency cannot be modified because these are
    	  global to the device configuration.
        * All outputs on the N divider must be defined for each plan.
        * The same frequency expressions used in CBPro can be used in the plan
          files, with the exception that you cannot reference another clock in
          the system (i.e. an expression such as OUT0*2 is not supported).
        * Clock names (OUT0, OUT1, etc.) are case insensitive.

    To create the alternate frequency plans for N0, N1, and N2 the
    CBProFOTF1.exe command line tool is run:

    	CBProFOTF1 --project Si5345-RevB-Project.slabtimeproj 
                          --out-folder Output --create-out-folder 
                          --plans-n0 N0.txt --plans-n1 N1.txt 
                          --plans-n2 N2.txt

    This will calculate the best base frequency plan and alternate frequency
    plans. Status messages will be logged to the console:
    					  
    	Output files will be saved in "Output"
    	Solving for shared VCO frequency ...
    	Success
    	Calculating base project frequency plan ...
    	Saving Base design files ...
    	Calculating N0 Plan #1
    	Saving N0 files ...
    	Calculating N1 Plan #1
    	Saving N1 files ...
    	Calculating N2 Plan #1
    	Calculating N2 Plan #2
    	Calculating N2 Plan #3
    	Calculating N2 Plan #4
    	Calculating N2 Plan #5
    	Saving N2 files ...
    	Done; 5 seconds elapsed

    The output files created by the tool will be described below. The general
    work flow of a host doing in-system update to these alternate frequency
    plans is:

        * Write the complete register script for the base configuration. This 
          needs to be done even if your device has an OPN (factory)
          configuration, since the base design frequency plan calculated by 
          the FOTF tool may differ from that calculated by CBPro in 
          stand-alone mode.

        * Write a N divider plan script to switch a particular N divider's 
          outputs to an alternate plan (or back to the base plan).

    When the example command sequence is run, the following files are created:

        Base-Plan-Design-Report.txt

            Design report for the base design. This report may differ from 
            what CBPro would generate for the same base project file.

        Base-Plan-Register-Script.txt

            A sequence of register writes to perform to load the base 
            configuration. This may be different from what CBPro would export
            for the same base project file. ** YOUR HOST MUST WRITE THIS 
            SCRIPT WHEN THE DEVICE IS POWERED ON OR RESET. **

        N0-Register-Script-All-Plans.csv

            Register writes to perform to switch to a plan on N0. This 
            includes all necessary control register writes required to fully 
            load the new configuration (such as Nx_UPDATE writes). 

    		Address,Base,Plan1
    		# Write Configuration
    		0x0303,0x00,0x80
    		0x0304,0xC0,0xFD
    		0x0305,0x75,0x1E
    		0x030A,0xE0,0x00
    		0x030B,0xAB,0xA2
    		# Load Configuration
    		0x030C,0x01,0x01

            All files contain comments starting with the # character.

        N0-Register-Script-Base-Plan.csv
        N0-Register-Script-Plan1.csv

            This contains the same data as N0-Register-Script-All-Plans.
            csv, but broken out by unique file for each plan. The file also
            contains a synopsis of the design goals and frequency plan as a
            comment. For example:

    		# N0 Register Script - Base-Plan
    		#
    		# Base Project: Si5345-RevB-Project.slabtimeproj
    		# Part: Si5345
    		# Design ID: <none>
    		# Inputs Vary Between Plans: No
    		# Created By: CBProFOTF1 v2.8.7.1 [2016-06-17]
    		# Timestamp: 2016-06-20 17:54:43 GMT-05:00
    		#
    		# OUT0: 161.1328125 MHz
    		# OUT1: 322.265625 MHz
    		#
    		# Fms0 = 644.53125 MHz [ 644 + 17/32 MHz ]
    		# N0 = 21.5374545454545454... [ 21 + 739/1375 ]
    		#
    		# R0 = 4
    		# R1 = 2
    		#
    		# Write Configuration
    		Address,Value
    		0x0303,0x00
    		0x0304,0xC0
    		0x0305,0x75
    		0x030A,0xE0
    		0x030B,0xAB
    		# Load Configuration
    		0x030C,0x01

        N0-Report.txt

            A custom frequency-on-the-fly report for N0.  This 
            summarizes the key design goals and frequency plan elements for
            each plan, including the base plan. For example:

    		N0 Frequency-On-The-Fly Report

    		Base Project: Si5345-RevB-Project.slabtimeproj
    		Part: Si5345
    		Design ID: <none>
    		Inputs Vary Between Plans: No
    		Created By: CBProFOTF1 v2.8.7.1 [2016-06-17]
    		Timestamp: 2016-06-20 17:54:43 GMT-05:00

    		Base Plan
    		=========
    		OUT0: 161.1328125 MHz
    		OUT1: 322.265625 MHz

    		Fms0 = 644.53125 MHz [ 644 + 17/32 MHz ]
    		N0 = 21.5374545454545454... [ 21 + 739/1375 ]

    		R0 = 4
    		R1 = 2

    		Plan #1
    		=======
    		OUT0: 155.52 MHz
    		OUT1: 311.04 MHz

    		Fms0 = 622.08 MHz [ 622 + 2/25 MHz ]
    		N0 = 22.3147545331790123... [ 22 + 26107/82944 ]

    		R0 = 4
    		R1 = 2
            
            **NOTE**: If any outputs in the plan may have worse case jitter 
            approaching 400 fs, it will be flagged in the plan mini 
            report. For example:
            
            Warning: worse case jitter may approach 400 fs on OUT0,OUT1       
               

        N0-Settings-Diff-All-Plans.csv

            A breakdown of what register settings are different between
            each plan on N0. This is for informational/debug use. It
            does NOT include plan update control register settings, such
            as N0_FUPDATE.

    A similar set of files is created for N1 and N2. In our example, there
    are more plans for N2. There are therefore additional columns
    in the "All" files and additional broken out register script files:

    	N1-Register-Script-All-Plans.csv
    	N1-Register-Script-Base-Plan.csv
    	N1-Register-Script-Plan1.csv
    	N1-Report.txt
    	N1-Settings-Diff-All-Plans.csv

    	N2-Register-Script-All-Plans.csv
    	N2-Register-Script-Base-Plan.csv
    	N2-Register-Script-Plan1.csv
    	N2-Register-Script-Plan2.csv
    	N2-Register-Script-Plan3.csv
    	N2-Register-Script-Plan4.csv
    	N2-Register-Script-Plan5.csv
    	N2-Report.txt
    	N2-Settings-Diff-All-Plans.csv

    An example sequence of activities by a host could be:

        1. Write Base-Plan-Register-Script.txt at system startup, reset, 
           etc.: any time NVM would be reloaded by the Si538x/4x device.
           The base input/output/bandwidth configuration will be
           operational after this.
        2. Write N0-Register-Script-Plan1.csv to switch N0 to plan
           #1. N1 and N2 will be unaffected.
        3. Write N2-Register-Script-Plan5.csv to switch N2 to plan
           #5. N0 and N1 will be unaffected.

    If the desired base + alternate plans can be achieved, the tool exits with
    status code 0. If it cannot, a message will be printed to standard error
    and the tool exits with status code 1.

    The example described above is available in C:\Program Files (x86)\Silicon
    Laboratories\ClockBuilder Pro\CLI\Samples\Single-PLL-FOTF (or equivalent).

OPTIONS

    --create-out-folder 

        Create the output folder does not exist already.

    --help 

        Print detailed usage to the console and exit.

    --out-folder folder

        The output folder. If this is not specified, the folder where the tool
        is run is used.

    --outfile-prefix string

        A prefix to append to every file created by the tool. By default,
        there is no prefix and files like DSPLLB-Report.txt and
        Registers-Base.txt are created. If you specified --outfile-prefix
        "Design1", these files would be named Design1-DSPLLB-Report.txt and
        Design1-Registers-Base.txt.

    --plans-dsplla pathname

        The plan scenarios for DSPLL A are defined in this file. See PLAN
        FILES for details. You only need to specify this for a DSPLL you want
        to make in-system changes to.

    --plans-dspllb pathname

        The plan scenarios for DSPLL B are defined in this file. See PLAN
        FILES for details. You only need to specify this for a DSPLL you want
        to make in-system changes to.

    --plans-dspllc pathname

        The plan scenarios for DSPLL C are defined in this file. See PLAN
        FILES for details. You only need to specify this for a DSPLL you want
        to make in-system changes to.

    --plans-dsplld pathname

        The plan scenarios for DSPLL D are defined in this file. See PLAN
        FILES for details. You only need to specify this for a DSPLL you want
        to make in-system changes to.

    --plans-n0 pathname

        The plan scenarios for N0 are defined in this file. See PLAN FILES for
        details. You only need to specify this for am N divider you want to
        make in-system changes to.

    --plans-n1 pathname

        The plan scenarios for N1 are defined in this file. See PLAN FILES for
        details. You only need to specify this for am N divider you want to
        make in-system changes to.

    --plans-n2 pathname

        The plan scenarios for N2 are defined in this file. See PLAN FILES for
        details. You only need to specify this for am N divider you want to
        make in-system changes to.

    --plans-n3 pathname

        The plan scenarios for N3 are defined in this file. See PLAN FILES for
        details. You only need to specify this for am N divider you want to
        make in-system changes to.

    --plans-n4 pathname

        The plan scenarios for N4 are defined in this file. See PLAN FILES for
        details. You only need to specify this for am N divider you want to
        make in-system changes to.

    --project pathname

        The base configuration project file. You are modifying this design.
        The underlying file will never be changed. You must specify this.

    --unlock password

        Provides Silicon Labs employees access to extended reporting in tool
        output.

    --version 

        Print this program's version number and exit.

